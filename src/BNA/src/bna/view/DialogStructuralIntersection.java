// Project: Bayesian networks applications (Master's thesis), BUT FIT 2013
// Author:  David Chaloupka (xchalo09)
// Created: 2013/05/06

package bna.view;

import bna.bnlib.BNLibIOException;
import bna.bnlib.BNLibIllegalArgumentException;
import bna.bnlib.BayesianNetwork;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;


/**
 * Dialog combines multiple Bayesian networks into a single structure having common edges.
 */
public class DialogStructuralIntersection extends javax.swing.JDialog {

    
    public DialogStructuralIntersection(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(this.getParent());
        this.loadConfiguration();
    }
    
    private void loadConfiguration() {
        MainWindow mw = MainWindow.getInstance();
        mw.loadWindowBounds(this, "DialogStructuralIntersection");
        this.textFieldTolerance.setText(mw.getConfiguration("StructuralIntersection", "tolerance"));
    }
    
    private void saveConfiguration() {
        MainWindow mw = MainWindow.getInstance();
        mw.setConfiguration("StructuralIntersection", "tolerance", this.textFieldTolerance.getText());
    }
    
    private void addNetworkToList(String path) {
        DefaultListModel model = (DefaultListModel)this.listSelectedNetworks.getModel();
        model.addElement(path);
    }
    
    private void removeSelectedNetworksFromList() {
        int[] selectedIndices = this.listSelectedNetworks.getSelectedIndices();
        if(selectedIndices == null || selectedIndices.length == 0)
            return;
        Arrays.sort(selectedIndices);
        DefaultListModel model = (DefaultListModel)this.listSelectedNetworks.getModel();
        for(int i = selectedIndices.length - 1 ; i >= 0 ; i--)
            model.remove(selectedIndices[i]);
    }
    
    private int getNetworkListSize() {
        return this.listSelectedNetworks.getModel().getSize();
    }
    
    private String[] getNetworkPathsFromList() {
        DefaultListModel model = (DefaultListModel)this.listSelectedNetworks.getModel();
        String[] paths = new String[model.getSize()];
        for(int i = 0 ; i < paths.length ; i++)
            paths[i] = (String)model.get(i);
        return paths;
    }
    
    private boolean verifyInputs() {
        String errorMsg = null;
        // validate tolerance
        String toleranceStr = this.textFieldTolerance.getText();
        int tolerance = 0;
        try {
            tolerance = Integer.valueOf(toleranceStr);
        }
        catch(NumberFormatException ex) {
            errorMsg = "Numeric parameters are invalid strings.";
        }
        if(tolerance < 0)
            errorMsg = "Tolerance has to be a non-negative integer.";
        // validate network paths
        if(this.getNetworkListSize() < 2)
            errorMsg = "At least two networks are needed to compute structural intersection.";
        
        // all valid?
        if(errorMsg != null) {
            JOptionPane.showMessageDialog(this, errorMsg, "Invalid parameters", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        else
            return true;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        buttonRemoveNetworks = new javax.swing.JButton();
        buttonAddNetwork = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listSelectedNetworks = new javax.swing.JList();
        buttonIntersection = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        textFieldTolerance = new javax.swing.JTextField();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Structural intersection");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
        });

        jLabel2.setText("Selected networks:");

        buttonRemoveNetworks.setText("Remove");
        buttonRemoveNetworks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveNetworksActionPerformed(evt);
            }
        });

        buttonAddNetwork.setText("Add");
        buttonAddNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddNetworkActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(listSelectedNetworks);
        listSelectedNetworks.setModel(new DefaultListModel());

        buttonIntersection.setText("Intersection");
        buttonIntersection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonIntersectionActionPerformed(evt);
            }
        });

        jLabel1.setText("Tolerate missing edge k-times:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(buttonIntersection, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldTolerance, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonAddNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonRemoveNetworks, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 76, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAddNetwork)
                    .addComponent(buttonRemoveNetworks))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textFieldTolerance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(buttonIntersection)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
        MainWindow.getInstance().saveWindowBounds(this, "DialogStructuralIntersection");
    }//GEN-LAST:event_formComponentMoved

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        MainWindow.getInstance().saveWindowBounds(this, "DialogStructuralIntersection");
    }//GEN-LAST:event_formComponentResized

    private void buttonAddNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddNetworkActionPerformed
        // pick the file and remember last directory
        MainWindow mw = MainWindow.getInstance();
        String lastNetworkDirectory = mw.getConfiguration("Network", "directory");
        if(lastNetworkDirectory == null)
            lastNetworkDirectory = ".";
        JFileChooser networkFileChooser = new JFileChooser(lastNetworkDirectory);
        networkFileChooser.setFileFilter(new FileNameExtensionFilter("Net file", "net"));
        networkFileChooser.setDialogTitle("Load a Bayesian network from file");
        networkFileChooser.showOpenDialog(this);
        if(networkFileChooser.getSelectedFile() == null)
            return;
        mw.setConfiguration("Network", "directory", networkFileChooser.getSelectedFile().getParent());
        // add the network to the list
        this.addNetworkToList(networkFileChooser.getSelectedFile().getPath());
    }//GEN-LAST:event_buttonAddNetworkActionPerformed

    private void buttonRemoveNetworksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveNetworksActionPerformed
        this.removeSelectedNetworksFromList();
    }//GEN-LAST:event_buttonRemoveNetworksActionPerformed

    private void buttonIntersectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonIntersectionActionPerformed
        this.saveConfiguration();
        if(!this.verifyInputs())
            return;
        try {
            int tolerance = Integer.valueOf(this.textFieldTolerance.getText());
            BayesianNetwork[] bns = this.loadAllNetworks();
            BayesianNetwork bnIntersection = BayesianNetwork.structuralIntersection(bns, tolerance);
            MainWindow.getInstance().setActiveNetwork(bnIntersection);
        }
        catch(BNLibIOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "I/O error", JOptionPane.ERROR_MESSAGE);
        }
        catch(BNLibIllegalArgumentException ex) {
            String message = "The following error occured when computing the structural intersection:\n" + ex.getMessage();
            JOptionPane.showMessageDialog(this, message, "Intersection error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonIntersectionActionPerformed
    
    private BayesianNetwork[] loadAllNetworks() throws BNLibIOException {
        String[] bnPaths = this.getNetworkPathsFromList();
        BayesianNetwork[] bns = new BayesianNetwork[bnPaths.length];
        // attempt to load the networks
        String bnPath = "";
        try {
            for(int i = 0 ; i < bns.length ; i++) {
                bnPath = bnPaths[i];
                bns[i] = BayesianNetwork.loadFromFile(bnPath);
            }
            
        }
        catch(BNLibIOException ex) {
            String msg = "The folowing error occured while loading network \"" + bnPath + "\":\n" + ex.getMessage();
            throw new BNLibIOException(msg);
        }
        return bns;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddNetwork;
    private javax.swing.JButton buttonIntersection;
    private javax.swing.JButton buttonRemoveNetworks;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listSelectedNetworks;
    private javax.swing.JTextField textFieldTolerance;
    // End of variables declaration//GEN-END:variables
}
