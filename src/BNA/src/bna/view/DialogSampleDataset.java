// Project: Bayesian networks applications (Master's thesis), BUT FIT 2013
// Author:  David Chaloupka (xchalo09)
// Created: 2013/04/04

package bna.view;

import bna.bnlib.BayesianNetwork;
import bna.bnlib.learning.Dataset;
import bna.bnlib.sampling.DatasetCreationSampler;
import bna.bnlib.sampling.SamplingController;
import javax.swing.JOptionPane;


/**
 * Dialog that samples current network and thereby creates a dataset.
 */
public class DialogSampleDataset extends javax.swing.JDialog {
    BayesianNetwork bn;
    SamplingController samplingController = null;
    Dataset dataset = null;
    boolean confirmed = false;

    public DialogSampleDataset(java.awt.Frame parent, boolean modal, BayesianNetwork bnToSample) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(this.getParent());
        this.bn = bnToSample;
    }

    private boolean verifyInputs() {
        String sampleCountStr = this.textFieldSampleCount.getText();
        if(sampleCountStr.isEmpty()) {
            String msg = "Sample count field cannot be empty.";
            JOptionPane.showMessageDialog(this, msg, "Incomplete inputs", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            long sampleCount = Long.valueOf(sampleCountStr);
            if(sampleCount <= 0) {
                String msg = "Sample count has to be a positive number.";
                JOptionPane.showMessageDialog(this, msg, "Invalid inputs", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        catch(NumberFormatException ex) {
            String msg = "Sample count field has to be an integral number.";
            JOptionPane.showMessageDialog(this, msg, "Invalid inputs", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        textFieldSampleCount = new javax.swing.JTextField();
        buttonSample = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Replace dataset by sampling");

        jLabel1.setText("Number of samples");

        buttonSample.setText("Sample");
        buttonSample.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSampleActionPerformed(evt);
            }
        });

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(textFieldSampleCount, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonSample, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textFieldSampleCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSample)
                    .addComponent(buttonCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSampleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSampleActionPerformed
        if(this.verifyInputs()) {
            final long sampleCount = Long.valueOf(this.textFieldSampleCount.getText());
            final DatasetCreationSampler datasetSampler = new DatasetCreationSampler(this.bn);
            this.samplingController = new SamplingController(sampleCount);
            
            Thread samplerThread = new Thread() {
                public void run() {
                    buttonSample.setEnabled(false);
                    datasetSampler.sample(samplingController);
                    if(samplingController.getStopFlag() == false) {
                        // the sampling ran till the successful end
                        dataset = datasetSampler.getDataset();
                        confirmed = true;
                        dispose();
                    }
                }
            };
            
            samplerThread.setDaemon(true);
            samplerThread.start();
        }
    }//GEN-LAST:event_buttonSampleActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        if(this.samplingController != null)
            this.samplingController.setStopFlag();
        confirmed = false;
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonSample;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField textFieldSampleCount;
    // End of variables declaration//GEN-END:variables
}
