// Project: Bayesian networks applications (Master's thesis), BUT FIT 2013
// Author:  David Chaloupka (xchalo09)
// Created: 2013/03/16

package bna.view;

import bna.bnlib.BNLibIllegalQueryException;
import bna.bnlib.BayesianNetwork;
import bna.bnlib.Factor;
import bna.bnlib.sampling.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;


/**
 * Dialog that takes a BN and allows to sample it with various options.
 */
public class DialogQuerySampling extends javax.swing.JDialog {
    private BayesianNetwork bn;
    

    /**
     * Creates new form DialogSampling
     */
    public DialogQuerySampling(java.awt.Frame parent, boolean modal, BayesianNetwork bn) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(parent);
        this.bn = bn;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textFieldSampleCount = new javax.swing.JTextField();
        textFieldTheadCount = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        comboBoxMethod = new javax.swing.JComboBox();
        checkBoxOnline = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableFactorView = new bna.view.FactorViewTable();
        jLabel4 = new javax.swing.JLabel();
        textFieldQuery = new javax.swing.JTextField();
        buttonStart = new javax.swing.JButton();
        buttonStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Answer a probabilistic query");

        jLabel1.setText("Number of samples");

        jLabel2.setText("Number of threads");

        textFieldSampleCount.setText("10000000");

        textFieldTheadCount.setText("2");

        jLabel3.setText("Method");

        comboBoxMethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Weighted sampling", "MCMC sampling" }));
        comboBoxMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxMethodActionPerformed(evt);
            }
        });

        checkBoxOnline.setText("On-line results");
        checkBoxOnline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxOnlineActionPerformed(evt);
            }
        });

        tableFactorView.setModel(FactorViewTable.EMPTY_TABLE_MODEL);
        jScrollPane1.setViewportView(tableFactorView);

        jLabel4.setText("Query");

        buttonStart.setText("Sample");
        buttonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartActionPerformed(evt);
            }
        });

        buttonStop.setText("Stop");
        buttonStop.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldQuery))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textFieldTheadCount, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textFieldSampleCount, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboBoxMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(checkBoxOnline)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(buttonStop, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textFieldQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textFieldSampleCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textFieldTheadCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboBoxMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkBoxOnline)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonStart)
                    .addComponent(buttonStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxMethodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxMethodActionPerformed

    private void buttonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartActionPerformed
        try {
            // parse input (exceptions are caught)
            final long sampleCount = Long.valueOf(this.textFieldSampleCount.getText());
            final int threadCount = Integer.valueOf(this.textFieldTheadCount.getText());
            
            SampleProducer sampleProducer;
            int samplingMethodIndex = this.comboBoxMethod.getSelectedIndex();
            if(samplingMethodIndex == 0)
                sampleProducer = new WeightedSampleProducer(this.bn, this.textFieldQuery.getText());
            else if(samplingMethodIndex == 1)
                sampleProducer = new MCMCSampleProducer(this.bn, this.textFieldQuery.getText());
            else {
                String msg = "No sampling method is selected.";
                JOptionPane.showMessageDialog(this, msg, "Incomplete specification", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            final SamplerInterface sampler;
            if(this.checkBoxOnline.isSelected()) {
                sampler = new QuerySamplerObserved(sampleProducer);
                QuerySamplerObserver observer = new QuerySamplerObserver() {
                    public void notifySample() {
                        Factor currentCPD = ((QuerySamplerObserved)sampler).getSamplesCounterNormalized();
                        ((FactorViewTable)tableFactorView).setFactor(currentCPD);
                    }
                };
                ((QuerySamplerObserved)sampler).registerObserver(observer);
            }
            else
                sampler = new QuerySamplerMultithreaded(sampleProducer, threadCount);
            
            Thread worker = new Thread() {
                @Override
                public void run() {
                    final SamplingController samplingController = new SamplingController(sampleCount / threadCount);
                    // prepare GUI for sampling
                    buttonStart.setEnabled(false);
                    checkBoxOnline.setEnabled(false);
                    buttonStop.setEnabled(true);
                    ((FactorViewTable)tableFactorView).setFactor(null);
                    ActionListener stoppingListener = new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            samplingController.setStopFlag();
                        }
                    };
                    buttonStop.addActionListener(stoppingListener);
                    // sampling process itself
                    sampler.sample(samplingController);
                    // show result if not online sampling
                    Factor result;
                    if(!checkBoxOnline.isSelected())
                        result = ((QuerySamplerMultithreaded)sampler).getSamplesCounterNormalized();
                    else
                        result = ((QuerySamplerObserved)sampler).getSamplesCounterNormalized();
                    ((FactorViewTable)tableFactorView).setFactor(result);
                    // restore GUI for next sampling
                    buttonStart.setEnabled(true);
                    checkBoxOnline.setEnabled(true);
                    buttonStop.setEnabled(false);
                    buttonStop.removeActionListener(stoppingListener);
                }
            };
            
            worker.start();
        }
        catch(NumberFormatException nfex) {
            String msg = "Input of a field is not a number.";
            JOptionPane.showMessageDialog(this, msg, "Invalid input data", JOptionPane.ERROR_MESSAGE);
        }
        catch(BNLibIllegalQueryException iqex) {
            JOptionPane.showMessageDialog(this, iqex.getMessage(), "Invalid query", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonStartActionPerformed

    private void checkBoxOnlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxOnlineActionPerformed
        this.textFieldTheadCount.setEnabled(!this.checkBoxOnline.isSelected());
    }//GEN-LAST:event_checkBoxOnlineActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonStart;
    private javax.swing.JButton buttonStop;
    private javax.swing.JCheckBox checkBoxOnline;
    private javax.swing.JComboBox comboBoxMethod;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableFactorView;
    private javax.swing.JTextField textFieldQuery;
    private javax.swing.JTextField textFieldSampleCount;
    private javax.swing.JTextField textFieldTheadCount;
    // End of variables declaration//GEN-END:variables
}
